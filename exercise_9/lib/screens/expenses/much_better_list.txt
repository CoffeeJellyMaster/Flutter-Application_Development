
import 'package:flutter/material.dart';
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:provider/provider.dart';
import '../../providers/login_provider.dart';
import '../../providers/accounts_provider.dart';
import 'expenses_form.dart';
import 'edit_expense.dart';
import '../../models/expense_model.dart';
import '../../providers/expense_provider.dart';
import '../accounts/account_landing.dart'; // Added this import

class ExpensesList extends StatelessWidget {
  const ExpensesList({super.key});

  void _navigateToAddForm(BuildContext context) async {
    Navigator.push(
      context,
      MaterialPageRoute(builder: (_) => const ExpensesForm()),
    );
  }

  void _navigateToEditForm(BuildContext context, Expense expense) {
    Navigator.push(
      context,
      MaterialPageRoute(
        builder: (_) => EditExpense(expense: expense),
      ),
    );
  }

  void _signOutAndNavigate(BuildContext context, LoginProvider loginProvider) {
    loginProvider.logout();
    Navigator.pushAndRemoveUntil(
      context,
      MaterialPageRoute(builder: (_) => const AccountLandingPage()), // Updated route to AccountLandingPage
      (Route<dynamic> route) => false,
    );
  }

  @override
  Widget build(BuildContext context) {
    final accountsProvider = Provider.of<AccountsProvider>(context);
    final loginProvider = Provider.of<LoginProvider>(context, listen: false);

    return Consumer<ExpenseListProvider>(
      builder: (context, provider, _) {
        return Scaffold(
          appBar: AppBar(
            automaticallyImplyLeading: false,
            backgroundColor: Colors.green[800],
            title: FutureBuilder<Map<String, String>?>( 
              future: accountsProvider.getUserNames(accountsProvider.currentUser?.uid ?? ''),
              builder: (context, snapshot) {
                if (snapshot.connectionState == ConnectionState.waiting) {
                  return const Text('Loading...');
                }
                if (snapshot.hasError || snapshot.data == null) {
                  return const Text('Unknown User');
                }
                final names = snapshot.data!;
                return Text('${names['firstName']} ${names['lastName']}');
              },
            ),
            actions: [
              TextButton.icon(
                onPressed: () => _signOutAndNavigate(context, loginProvider),
                icon: const Icon(Icons.logout, color: Colors.white),
                label: const Text(
                  'Sign Out',
                  style: TextStyle(color: Colors.white),
                ),
              ),
            ],
          ),
          body: StreamBuilder<QuerySnapshot>(
            stream: provider.expenses,
            builder: (context, snapshot) {
              if (snapshot.hasError) {
                return const Center(child: Text("Something went wrong"));
              } else if (snapshot.connectionState == ConnectionState.waiting) {
                return const Center(child: CircularProgressIndicator());
              }

              if (snapshot.data!.docs.isEmpty) {
                return const Center(child: Text("No expenses found"));
              }

              final expenses = snapshot.data!.docs.map((doc) {
                final data = doc.data() as Map<String, dynamic>;
                return Expense.fromJson(data, doc.id);
              }).toList();

              return ListView.builder(
                itemCount: expenses.length,
                itemBuilder: (context, index) {
                  final expense = expenses[index];
                  return Padding(
                    padding: const EdgeInsets.symmetric(horizontal: 8.0, vertical: 4.0),
                    child: SizedBox(
                      width: double.infinity,
                      child: ElevatedButton(
                        style: ElevatedButton.styleFrom(
                          backgroundColor: expense.isPaid == true ? Colors.green : Colors.grey[300],
                          alignment: Alignment.centerLeft,
                          padding: const EdgeInsets.symmetric(vertical: 16.0, horizontal: 12.0),
                        ),
                        onPressed: () => _navigateToEditForm(context, expense),
                        child: Text(
                          expense.name,
                          style: TextStyle(
                            color: expense.isPaid == true ? Colors.white : Colors.black,
                            fontSize: 16,
                            fontWeight: FontWeight.w500,
                          ),
                        ),
                      ),
                    ),
                  );
                },
              );
            },
          ),
          floatingActionButton: FloatingActionButton(
            onPressed: () => _navigateToAddForm(context),
            child: const Icon(Icons.add),
          ),
        );
      },
    );
  }
}
